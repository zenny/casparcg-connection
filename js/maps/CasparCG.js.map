{"version":3,"sources":["CasparCG.ts"],"names":[],"mappings":"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","file":"CasparCG.js","sourcesContent":["import {Promise} from \"es6-promise\";\nimport {EventEmitter} from \"hap\";\nimport {CasparCGSocket, SocketState} from \"./lib/CasparCGSocket\";\nimport {AMCP, AMCPUtil as AMCPUtilNS} from \"./lib/AMCP\";\n// AMCPUtilNS\nimport CasparCGSocketResponse = AMCPUtilNS.CasparCGSocketResponse;\nimport {Enum} from \"./lib/ServerStateEnum\";\nimport {IConnectionOptions, ConnectionOptions, Options as OptionsNS} from \"./lib/AMCPConnectionOptions\";\n// Options NS\nimport QueueMode = OptionsNS.QueueMode;\n// Command NS\nimport {Command as CommandNS} from \"./lib/AbstractCommand\";\nimport IAMCPCommand = CommandNS.IAMCPCommand;\nimport isIAMCPCommand = CommandNS.isIAMCPCommand;\nimport IAMCPStatus = CommandNS.IAMCPStatus;\nimport AMCPResponse = CommandNS.AMCPResponse;\n// Param NS\nimport {Param as ParamNS} from \"./lib/ParamSignature\";\nimport Param = ParamNS.Param;\nimport TemplateData = ParamNS.TemplateData;\n// Event NS\nimport {BaseEvent, CasparCGSocketStatusEvent, CasparCGSocketCommandEvent, CasparCGSocketResponseEvent, LogEvent} from \"./lib/event/Events\";\n// Callback NS\nimport {Callback as CallbackNS} from \"./lib/global/Callback\";\nimport IBooleanCallback = CallbackNS.IBooleanCallback;\nimport IErrorCallback = CallbackNS.IErrorCallback;\nimport IEventCallback = CallbackNS.IEventCallback;\nimport IStringCallback = CallbackNS.IStringCallback;\nimport IResponseCallback = CallbackNS.IResponseCallback;\nimport ISocketStatusCallback = CallbackNS.ISocketStatusCallback;\n\n/*\nhttps://github.com/CasparCG/Server/commits/2.1.0/protocol/amcp/AMCPCommandsImpl.cpp\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"LOADBG\",\t\t\t\t\t\tloadbg_describer,\t\t\t\t\tloadbg_command,\t\t\t\t\t1);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"LOAD\",\t\t\t\t\t\tload_describer,\t\t\t\t\t\tload_command,\t\t\t\t\t1);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"PLAY\",\t\t\t\t\t\tplay_describer,\t\t\t\t\t\tplay_command,\t\t\t\t\t0);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"PAUSE\",\t\t\t\t\t\tpause_describer,\t\t\t\t\tpause_command,\t\t\t\t\t0);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"RESUME\",\t\t\t\t\t\tresume_describer,\t\t\t\t\tresume_command,\t\t\t\t\t0);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"STOP\",\t\t\t\t\t\tstop_describer,\t\t\t\t\t\tstop_command,\t\t\t\t\t0);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"CLEAR\",\t\t\t\t\t\tclear_describer,\t\t\t\t\tclear_command,\t\t\t\t\t0);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"CALL\",\t\t\t\t\t\tcall_describer,\t\t\t\t\t\tcall_command,\t\t\t\t\t1);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"SWAP\",\t\t\t\t\t\tswap_describer,\t\t\t\t\t\tswap_command,\t\t\t\t\t1);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"ADD\",\t\t\t\t\t\t\tadd_describer,\t\t\t\t\t\tadd_command,\t\t\t\t\t1);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"REMOVE\",\t\t\t\t\t\tremove_describer,\t\t\t\t\tremove_command,\t\t\t\t\t0);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"PRINT\",\t\t\t\t\t\tprint_describer,\t\t\t\t\tprint_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Basic Commands\",\t\tL\"LOG LEVEL\",\t\t\t\t\tlog_level_describer,\t\t\t\tlog_level_command,\t\t\t\t1);\nrepo.register_command(\t\t\tL\"Basic Commands\",\t\tL\"LOG CATEGORY\",\t\t\t\tlog_category_describer,\t\t\t\tlog_category_command,\t\t\t2);\nrepo.register_channel_command(\tL\"Basic Commands\",\t\tL\"SET\",\t\t\t\t\t\t\tset_describer,\t\t\t\t\t\tset_command,\t\t\t\t\t2);\nrepo.register_command(\t\t\tL\"Basic Commands\",\t\tL\"LOCK\",\t\t\t\t\t\tlock_describer,\t\t\t\t\t\tlock_command,\t\t\t\t\t2);\n\nrepo.register_command(\t\t\tL\"Data Commands\", \t\tL\"DATA STORE\",\t\t\t\t\tdata_store_describer,\t\t\t\tdata_store_command,\t\t\t\t2);\nrepo.register_command(\t\t\tL\"Data Commands\", \t\tL\"DATA RETRIEVE\",\t\t\t\tdata_retrieve_describer,\t\t\tdata_retrieve_command,\t\t\t1);\nrepo.register_command(\t\t\tL\"Data Commands\", \t\tL\"DATA LIST\",\t\t\t\t\tdata_list_describer,\t\t\t\tdata_list_command,\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Data Commands\", \t\tL\"DATA REMOVE\",\t\t\t\t\tdata_remove_describer,\t\t\t\tdata_remove_command,\t\t\t1);\n\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG ADD\",\t\t\t\t\t\tcg_add_describer,\t\t\t\t\tcg_add_command,\t\t\t\t\t3);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG PLAY\",\t\t\t\t\t\tcg_play_describer,\t\t\t\t\tcg_play_command,\t\t\t\t1);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG STOP\",\t\t\t\t\t\tcg_stop_describer,\t\t\t\t\tcg_stop_command,\t\t\t\t1);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG NEXT\",\t\t\t\t\t\tcg_next_describer,\t\t\t\t\tcg_next_command,\t\t\t\t1);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG REMOVE\",\t\t\t\t\tcg_remove_describer,\t\t\t\tcg_remove_command,\t\t\t\t1);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG CLEAR\",\t\t\t\t\tcg_clear_describer,\t\t\t\t\tcg_clear_command,\t\t\t\t0);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG UPDATE\",\t\t\t\t\tcg_update_describer,\t\t\t\tcg_update_command,\t\t\t\t2);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG INVOKE\",\t\t\t\t\tcg_invoke_describer,\t\t\t\tcg_invoke_command,\t\t\t\t2);\nrepo.register_channel_command(\tL\"Template Commands\",\tL\"CG INFO\",\t\t\t\t\t\tcg_info_describer,\t\t\t\t\tcg_info_command,\t\t\t\t0);\n\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER KEYER\",\t\t\t\t\tmixer_keyer_describer,\t\t\t\tmixer_keyer_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER CHROMA\",\t\t\t\tmixer_chroma_describer,\t\t\t\tmixer_chroma_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER BLEND\",\t\t\t\t\tmixer_blend_describer,\t\t\t\tmixer_blend_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER OPACITY\",\t\t\t\tmixer_opacity_describer,\t\t\tmixer_opacity_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER BRIGHTNESS\",\t\t\tmixer_brightness_describer,\t\t\tmixer_brightness_command,\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER SATURATION\",\t\t\tmixer_saturation_describer,\t\t\tmixer_saturation_command,\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER CONTRAST\",\t\t\t\tmixer_contrast_describer,\t\t\tmixer_contrast_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER LEVELS\",\t\t\t\tmixer_levels_describer,\t\t\t\tmixer_levels_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER FILL\",\t\t\t\t\tmixer_fill_describer,\t\t\t\tmixer_fill_command,\t\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER CLIP\",\t\t\t\t\tmixer_clip_describer,\t\t\t\tmixer_clip_command,\t\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER ANCHOR\",\t\t\t\tmixer_anchor_describer,\t\t\t\tmixer_anchor_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER CROP\",\t\t\t\t\tmixer_crop_describer,\t\t\t\tmixer_crop_command,\t\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER ROTATION\",\t\t\t\tmixer_rotation_describer,\t\t\tmixer_rotation_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER PERSPECTIVE\",\t\t\tmixer_perspective_describer,\t\tmixer_perspective_command,\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER MIPMAP\",\t\t\t\tmixer_mipmap_describer,\t\t\t\tmixer_mipmap_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER VOLUME\",\t\t\t\tmixer_volume_describer,\t\t\t\tmixer_volume_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER MASTERVOLUME\",\t\t\tmixer_mastervolume_describer,\t\tmixer_mastervolume_command,\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER STRAIGHT_ALPHA_OUTPUT\",\tmixer_straight_alpha_describer,\t\tmixer_straight_alpha_command,\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER GRID\",\t\t\t\t\tmixer_grid_describer,\t\t\t\tmixer_grid_command,\t\t\t\t1);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER COMMIT\",\t\t\t\tmixer_commit_describer,\t\t\t\tmixer_commit_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Mixer Commands\",\t\tL\"MIXER CLEAR\",\t\t\t\t\tmixer_clear_describer,\t\t\t\tmixer_clear_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Mixer Commands\",\t\tL\"CHANNEL_GRID\",\t\t\t\tchannel_grid_describer,\t\t\t\tchannel_grid_command,\t\t\t0);\n\nrepo.register_command(\t\t\tL\"Thumbnail Commands\",\tL\"THUMBNAIL LIST\",\t\t\t\tthumbnail_list_describer,\t\t\tthumbnail_list_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Thumbnail Commands\",\tL\"THUMBNAIL RETRIEVE\",\t\t\tthumbnail_retrieve_describer,\t\tthumbnail_retrieve_command,\t\t1);\nrepo.register_command(\t\t\tL\"Thumbnail Commands\",\tL\"THUMBNAIL GENERATE\",\t\t\tthumbnail_generate_describer,\t\tthumbnail_generate_command,\t\t1);\nrepo.register_command(\t\t\tL\"Thumbnail Commands\",\tL\"THUMBNAIL GENERATE_ALL\",\t\tthumbnail_generateall_describer,\tthumbnail_generateall_command,\t0);\n\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"CINF\",\t\t\t\t\t\tcinf_describer,\t\t\t\t\t\tcinf_command,\t\t\t\t\t1);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"CLS\",\t\t\t\t\t\t\tcls_describer,\t\t\t\t\t\tcls_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"FLS\",\t\t\t\t\t\t\tfls_describer,\t\t\t\t\t\tfls_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"TLS\",\t\t\t\t\t\t\ttls_describer,\t\t\t\t\t\ttls_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"VERSION\",\t\t\t\t\t\tversion_describer,\t\t\t\t\tversion_command,\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO\",\t\t\t\t\t\tinfo_describer,\t\t\t\t\t\tinfo_command,\t\t\t\t\t0);\nrepo.register_channel_command(\tL\"Query Commands\",\t\tL\"INFO\",\t\t\t\t\t\tinfo_channel_describer,\t\t\t\tinfo_channel_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO TEMPLATE\",\t\t\t\tinfo_template_describer,\t\t\tinfo_template_command,\t\t\t1);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO CONFIG\",\t\t\t\t\tinfo_config_describer,\t\t\t\tinfo_config_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO PATHS\",\t\t\t\t\tinfo_paths_describer,\t\t\t\tinfo_paths_command,\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO SYSTEM\",\t\t\t\t\tinfo_system_describer,\t\t\t\tinfo_system_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO SERVER\",\t\t\t\t\tinfo_server_describer,\t\t\t\tinfo_server_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO QUEUES\",\t\t\t\t\tinfo_queues_describer,\t\t\t\tinfo_queues_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"INFO THREADS\",\t\t\t\tinfo_threads_describer,\t\t\t\tinfo_threads_command,\t\t\t0);\nrepo.register_channel_command(\tL\"Query Commands\",\t\tL\"INFO DELAY\",\t\t\t\t\tinfo_delay_describer,\t\t\t\tinfo_delay_command,\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"DIAG\",\t\t\t\t\t\tdiag_describer,\t\t\t\t\t\tdiag_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"GL INFO\",\t\t\t\t\t\tgl_info_describer,\t\t\t\t\tgl_info_command,\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"GL GC\",\t\t\t\t\t\tgl_gc_describer,\t\t\t\t\tgl_gc_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"BYE\",\t\t\t\t\t\t\tbye_describer,\t\t\t\t\t\tbye_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"KILL\",\t\t\t\t\t\tkill_describer,\t\t\t\t\t\tkill_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"RESTART\",\t\t\t\t\t\trestart_describer,\t\t\t\t\trestart_command,\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"HELP\",\t\t\t\t\t\thelp_describer,\t\t\t\t\t\thelp_command,\t\t\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"HELP PRODUCER\",\t\t\t\thelp_producer_describer,\t\t\thelp_producer_command,\t\t\t0);\nrepo.register_command(\t\t\tL\"Query Commands\",\t\tL\"HELP CONSUMER\",\t\t\t\thelp_consumer_describer,\t\t\thelp_consumer_command,\t\t\t0);\n*/\n\n/**\n * CasparCG Protocols\n */\nexport namespace CasparCGProtocols {\n\n\t/**\n\t * CasparCG Protocol version 2.1\n\t */\n\texport namespace v2_1 {\n\n\t\t/**\n\t\t * AMCP version 2.1\n\t\t */\n\t\texport interface AMCP extends IVideo, ICG, IMixer, IChannel, IData, IThumbnail, IQuery, IOperation {\n\t\t}\n\n\t\t/**\n\t\t * AMCP Media-commands\n\t\t */\n\t\texport interface IVideo {\n\t\t\tloadbg(channel: number, layer: number, clip: string, loop?: boolean, transition?: Enum.Transition|string, transitionDuration?: number, transitionEasing?: Enum.Ease|string, transitionDirection?: Enum.Direction|string, seek?: number, length?: number, filter?: string, auto?: boolean|number|string): Promise<IAMCPCommand>;\n\t\t\tload(channel: number, layer: number, clip: string, loop?: boolean, transition?: Enum.Transition|string, transitionDuration?: number, transitionEasing?: Enum.Ease|string, transitionDirection?: Enum.Direction|string, seek?: number, length?: number, filter?: string, auto?: boolean|number|string): Promise<IAMCPCommand>;\n\t\t\tplay(channel: number, layer?: number, clip?: string, loop?: boolean, transition?: Enum.Transition|string, transitionDuration?: number, transitionEasing?: Enum.Ease|string, transitionDirection?: Enum.Direction|string, seek?: number, length?: number, filter?: string, auto?: boolean|number|string): Promise<IAMCPCommand>;\n\t\t\tpause(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tresume(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tstop(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t}\n\n\t\t/**\n\t\t * AMCP Template-commands\n\t\t */\n\t\texport interface ICG {\n\t\t\tcgAdd(channel: number, layer: number, flashLayer: number, templateName: string, playOnLoad: boolean|number|string, data?: TemplateData): Promise<IAMCPCommand>;\n\t\t\tcgPlay(channel: number, layer: number, flashLayer: number): Promise<IAMCPCommand>;\n\t\t\tcgStop(channel: number, layer: number, flashLayer: number): Promise<IAMCPCommand>;\n\t\t\tcgNext(channel: number, layer: number, flashLayer: number): Promise<IAMCPCommand>;\n\t\t\tcgRemove(channel: number, layer: number, flashLayer: number): Promise<IAMCPCommand>;\n\t\t\tcgClear(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tcgUpdate(channel: number, layer: number, flashLayer: number, data: TemplateData): Promise<IAMCPCommand>;\n\t\t\tcgInvoke(channel: number, layer: number, flashLayer: number, methodName: string): Promise<IAMCPCommand>;\n\t\t}\n\n\t\t/**\n\t\t * AMCP Mixer-commands\n\t\t */\n\t\texport interface IMixer {\n\t\t\tmixerKeyer(channel: number, layer?: number, state?: number|boolean, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerKeyerDeferred(channel: number, layer?: number, state?: number|boolean): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusKeyer(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerChroma(channel: number, layer?: number, keyer?: Enum.Chroma|string, threshold?: number, softness?: number, spill?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerChromaDeferred(channel: number, layer?: number, keyer?: Enum.Chroma|string, threshold?: number, softness?: number, spill?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusChroma(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerBlend(channel: number, layer?: number, blendmode?: Enum.BlendMode|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerBlendDeferred(channel: number, layer?: number, blendmode?: Enum.BlendMode|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusBlend(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerOpacity(channel: number, layer?: number, opacity?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerOpacityDeferred(channel: number, layer?: number, opacity?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusOpacity(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerBrightness(channel: number, layer?: number, brightness?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerBrightnessDeferred(channel: number, layer?: number, brightness?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusBrightness(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerSaturation(channel: number, layer?: number, saturation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerSaturationDeferred(channel: number, layer?: number, saturation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusSaturation(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerBrightness(channel: number, layer?: number, contrast?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerContrastDeferred(channel: number, layer?: number, contrast?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusContrast(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerLevels(channel: number, layer?: number, minInput?: number, maxInput?: number, gamma?: number, minOutput?: number, maxOutput?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerLevelsDeferred(channel: number, layer?: number, minInput?: number, maxInput?: number, gamma?: number, minOutput?: number, maxOutput?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusLevels(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerFill(channel: number, layer?: number, x?: number, y?: number, xScale?: number, yScale?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerFillDeferred(channel: number, layer?: number, x?: number, y?: number, xScale?: number, yScale?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusFill(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerClip(channel: number, layer?: number, x?: number, y?: number, width?: number, height?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerClipDeferred(channel: number, layer?: number, x?: number, y?: number, width?: number, height?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusClip(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerAnchor(channel: number, layer?: number, x?: number, y?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerAnchorDeferred(channel: number, layer?: number, x?: number, y?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusAnchor(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerCrop(channel: number, layer?: number, left?: number, top?: number, right?: number, bottom?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerCropDeferred(channel: number, layer?: number, left?: number, top?: number, right?: number, bottom?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusCrop(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerRotation(channel: number, layer?: number, rotation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerRotationDeferred(channel: number, layer?: number, rotation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusRotation(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerPerspective(channel: number, layer?: number, topLeftX?: number, topLeftY?: number, topRightX?: number, topRightY?: number, bottomRightX?:  number, bottomRightY?: number, bottomLeftX?: number, bottomLeftY?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerPerspectiveDeferred(channel: number, layer?: number, topLeftX?: number, topLeftY?: number, topRightX?: number, topRightY?: number, bottomRightX?:  number, bottomRightY?: number, bottomLeftX?: number, bottomLeftY?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusPerspective(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerMipmap(channel: number, layer?: number, state?: number|boolean, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerMipmapDeferred(channel: number, layer?: number, state?: number|boolean): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusMipmap(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerVolume(channel: number, layer?: number, volume?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerVolumeDeferred(channel: number, layer?: number, volume?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusVolume(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerMastervolume(channel: number, mastervolume?: number, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerMastervolumeDeferred(channel: number, mastervolume?: number): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusMastervolume(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerStraightAlphaOutput(channel: number, layer?: number, state?: number|boolean, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerStraightAlphaOutputDeferred(channel: number, layer?: number, state?: number|boolean): Promise<IAMCPCommand>;\n\t\t\tgetMixerStatusStraightAlphaOutput(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tmixerGrid(channel: number, resolution: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\t\t\tmixerGridDeferred(channel: number, resolution: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\t\t\tmixerCommit(channel: number): Promise<IAMCPCommand>;\n\t\t\tmixerClear(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t}\n\n\t\t/**\n\t\t * AMCP Channel-commands\n\t\t */\n\t\texport interface IChannel {\n\t\t\tclear(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t////\tcall(channel: number, layer: number): Promise<IAMCPCommand>;\n\t\t////\tswap(): Promise<IAMCPCommand>;\n\t\t////\tadd(channel: number): Promise<IAMCPCommand>;\n\t\t////\tremove(channel: number): Promise<IAMCPCommand>;\n\t\t\tprint(channel: number): Promise<IAMCPCommand>;\n\t\t////\tset(channel: number): Promise<IAMCPCommand>;\n\t\t\tlock(channel: number, action: Enum.Lock|string, lockPhrase?: string): Promise<IAMCPCommand>;\n\t\t\tchannelGrid(): Promise<IAMCPCommand>;\n\t\t\tglGC(): Promise<IAMCPCommand>;\n\t\t}\n\n\t\t/**\n\t\t * AMCP Template Data-commands\n\t\t */\n\t\texport interface IData {\n\t\t\tdataStore(fileName: string, data: TemplateData): Promise<IAMCPCommand>;\n\t\t\tdataRetrieve(fileName: string): Promise<IAMCPCommand>;\n\t\t\tdataList(): Promise<IAMCPCommand>;\n\t\t\tdataRemove(fileName: string): Promise<IAMCPCommand>;\n\t\t}\n\n\t\t/**\n\t\t * AMCP Thumbnail-commands\n\t\t */\n\t\texport interface IThumbnail {\n\t\t\tthumbnailList(): Promise<IAMCPCommand>;\n\t\t\tthumbnailRetrieve(fileName: string): Promise<IAMCPCommand>;\n\t\t\tthumbnailGenerate(fileName: string): Promise<IAMCPCommand>;\n\t\t\tthumbnailGenerateAll(): Promise<IAMCPCommand>;\n\t\t}\n\n\t\t/**\n\t\t * AMCP Query-commands\n\t\t */\n\t\texport interface IQuery {\n\t\t\tcinf(fileName: string): Promise<IAMCPCommand>;\n\t\t\tcls(): Promise<IAMCPCommand>;\n\t\t\tfls(): Promise<IAMCPCommand>;\n\t\t\ttls(): Promise<IAMCPCommand>;\n\t\t\tversion(component?: Enum.Version): Promise<IAMCPCommand>;\n\t\t\tinfo(channel?: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tinfoTemplate(template: string): Promise<IAMCPCommand>;\n\t\t\tinfoConfig(): Promise<IAMCPCommand>;\n\t\t\tinfoPaths(): Promise<IAMCPCommand>;\n\t\t\tinfoSystem(): Promise<IAMCPCommand>;\n\t\t\tinfoServer(): Promise<IAMCPCommand>;\n\t\t\tinfoQueues(): Promise<IAMCPCommand>;\n\t\t\tinfoThreads(): Promise<IAMCPCommand>;\n\t\t\tinfoDelay(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tcgInfo(channel: number, layer?: number, flashLayer?: number): Promise<IAMCPCommand>;\n\t\t\ttemplateHostInfo(channel: number, layer?: number): Promise<IAMCPCommand>;\n\t\t\tglInfo(): Promise<IAMCPCommand>;\n\t\t\tlogLevel(level: Enum.LogLevel|string): Promise<IAMCPCommand>;\n\t\t\tlogCategory(category: Enum.LogCategory|string, enabled: boolean): Promise<IAMCPCommand>;\n\t\t\tlogCalltrace(enabled: boolean): Promise<IAMCPCommand>;\n\t\t\tlogCommunication(enabled: boolean): Promise<IAMCPCommand>;\n\t\t\tdiag(): Promise<IAMCPCommand>;\n\t\t\thelp(command?: Enum.Command|string): Promise<IAMCPCommand>;\n\t\t\tgetCommands(): Promise<IAMCPCommand>;\n\t\t\thelpProducer(producer?: Enum.Producer|string): Promise<IAMCPCommand>;\n\t\t\tgetProducers(): Promise<IAMCPCommand>;\n\t\t\thelpConsumer(consumer?: Enum.Consumer|string): Promise<IAMCPCommand>;\n\t\t\tgetConsumers(): Promise<IAMCPCommand>;\n\t\t}\n\n\t\t/**\n\t\t * AMCP Operation-commands\n\t\t */\n\t\texport interface IOperation {\n\t\t\tbye(): Promise<IAMCPCommand>;\n\t\t\tkill(): Promise<IAMCPCommand>;\n\t\t\trestart(): Promise<IAMCPCommand>;\n\t\t}\n\t}\n}\n\n/**\n * CasparCG Interface\n */\nexport interface ICasparCGConnection {\n\tconnectionOptions: ConnectionOptions;\n\tconnected: boolean;\n\tconnectionStatus: SocketState;\n\tcommandQueue: Array<IAMCPCommand>;\n\tremoveQueuedCommand(id: string): boolean;\n\tconnect(options?: IConnectionOptions): void;\n\tdisconnect(): void;\n\tdo(command: IAMCPCommand): Promise<IAMCPCommand>;\n\tdo(commandString: string, ...params: (string|Param)[]): Promise<IAMCPCommand>;\n}\n\n/**\n * The main object and entrypoint for all interactions. `CasparCG` allows for flexible configuration, re-configuration and events/callbacks.\n * It implements all [[AMCP]] commands as high-level methods with convenient interfaces.\n * \n * There is a single [[CasparCGSocket]] pr. `CasparCG` object. \n * `CasparCG` should be the only public interface to interact directly with.\n */\nexport class CasparCG extends EventEmitter implements ICasparCGConnection, ConnectionOptions, CasparCGProtocols.v2_1.AMCP {\n\tprivate _connected: boolean;\n\tprivate _host: string;\n\tprivate _port: number;\n\tprivate _autoReconnect: boolean;\n\tprivate _autoReconnectInterval: number;\n\tprivate _autoReconnectAttempts: number;\n\tprivate _socket: CasparCGSocket;\n\tprivate _queuedCommands: Array<IAMCPCommand> = new Array<IAMCPCommand>();\n\tprivate _sentCommands: Array<IAMCPCommand> = new Array<IAMCPCommand>();\n\n\t/**\n\t * Try to connect upon creation.\n\t */\n\tpublic autoConnect: boolean = undefined;\n\n\n\t/**b\n\t * @todo: document  \n\t */\n\tpublic queueMode: QueueMode = undefined;\n\n\t/**\n\t * Setting this to true will print out logging to the `Console`, in addition to the optinal [[onLog]] and [[LogEvent.LOG]].  \n\t */\n\tpublic debug: boolean = undefined;\n\n\t/**\n\t * Callback for all logging. \n\t */\n\tpublic onLog: IStringCallback = undefined;\n\n\t/**\n\t * Callback for all status updates from the `CasparCGSocket`. \n\t */\n\tpublic onConnectionStatus: ISocketStatusCallback = undefined;\n\n\t/**\n\t * Callback for status updates from the `CasparCGSocket` if the `connected` property changes value.\n\t */\n\tpublic onConnectionChanged: IBooleanCallback = undefined;\n\n\t/**\n\t * Callback for status updates from the `CasparCGSocket` if the `connected` property is set to `true`.\n\t */\n\tpublic onConnected: IBooleanCallback = undefined;\n\n\t/**\n\t * Callback for status updates from the `CasparCGSocket` if the `connected` property is set to `false`.\n\t */\n\tpublic onDisconnected: IBooleanCallback = undefined;\n\n\t/**\n\t * Callback for general errors\n\t */\n\tpublic onError: IErrorCallback = undefined;\n\n\t/**\n\t * If the constructor gets called with no parameters, all properties of the CasparCG object will match all default properties defined by [[IConnectionOptions]].\n\t * \n\t ```\n\t var con = new CasparCG(); \t\n\t // host = 127.0.0.1, port = 5250, autoConnect = true ...\n\t \n\t  con.play(1, 1, \"amb\");\t\t\n\t  // you can interact with the server, but you have no knowledge of the conenction status until the onConnect event- or callback gets invoked\n\t // the `PlayCommand` will however be queued and fired when the connection gets established\n\t con.close();\n\t ```\n\t *  \n\t * @param host\t\tDefaults to `IConnectionOptions.host`\n\t * @param port\t\tDefaults to `IConnectionOptions.host`\n\t * @param options\tAn object with combination of properties defined by `IConnectionOptions`. All properties not explicitly set will fall back to the defaults defined by `IConnectionOptions`. \n\t *\n\t * All callbacks including [[onConnected]] will be set prior trying to establish connection, so the `CasparCG` object will give back all events even if [[CasparCG.autoConnect]] is `true`.\n\t */\n\tpublic constructor();\n\t/**\n\t * Set host/port directly in constructor:\n\t * \n\t ```\n\t var con = new CasparCG(\"192.168.0.1\", 5251);\t\n\t // host = 192.168.0.1, port = 5251, autoConnect = true ...\n\n\t // change properties after the constructor\n\t con.debug = true;\n\t \n\t con.play(1, 1, \"amb\");\n\t con.close();\n\t ```\n\t *\n\t */\n\tpublic constructor(host?: string, port?: number);\n\t/**\n\t * Callbacks and events after constructor:\n\t * \n\t ```\n\t var con = new CasparCG({host: \"192.168.0.1\", autoConnect: false});\t\n\t // host = 192.168.0.1, port = 5250, autoConnect = false ...\n\t \n\t // add onLog callback after constructor\n\t con.onLog = function(logMessage){ console.log(logMessage); };\t\t\t\t\t\t\n\t \n\t // add eventlistener to the conenction event before connecting\n\t con.on(CasparCGSocketStatusEvent.CONNECTED, onConnection(event));\t\t\n\t \n\t con.connect();\n\t ```\n\t * Callback in constructor:\n\t * \n\t ```\n\t var con = new CasparCG({host: \"192.168.0.1\", onConnect: onConnectedCallback});\t\n\t // Connection callbacks can be set in the constructor and will be registered before autoConnect invokes. \n\t // This ensures that you recieve all callbacks\n\t ```\n\t * Inline function syntax:\n\t * \n\t ```\n\t var con = new CasparCG({host: \"192.168.0.1\", onConnect: function(connected) {\n\t\t \t// do something once we get connected\n\t\t \tconsole.log(\"Are we conencted?\", connected)\n\t \t}\n\t});\t\n\t ```\n\t * Inline fat arrow syntax:\n\t * \n\t ```\n\t var con = new CasparCG({host: \"192.168.0.1\", onConnect: (connected) => {\n\t\t \t// do something once we get connected\n\t\t \tconsole.log(\"Are we conencted?\", connected)\n\t \t}\n\t});\t\n\t ```\n\t *\n\t */\n\tpublic constructor(options?: IConnectionOptions);\n\tpublic constructor(hostOrOptions?: any, port?: number) {\n\t\tsuper();\n\t\tlet options: ConnectionOptions = new ConnectionOptions(hostOrOptions, port);\n\n\t\t// if both options and port specified, port overrides options\n\t\tif (port && (port !== options.port)) {\n\t\t\toptions.port = port;\n\t\t}\n\n\t\tthis._createNewSocket(options);\n\n\t\tif (this.autoConnect) {\n\t\t\tthis.connect();\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\tprivate _createNewSocket(options?: IConnectionOptions, enforceRecreation: boolean = false): void {\n\t\tlet hasNewOptions = false;\n\t\tfor (let key in options) {\n\n\t\t\t// @todo: object.assign\n\t\t\tif (!options.hasOwnProperty(key)) {\t\t// @todo: ????\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.hasOwnProperty(key) ||  CasparCG.prototype.hasOwnProperty(key)) {\n\t\t\t\t// only update new options\n\t\t\t\tif (this[key] !== options[key]) {\n\t\t\t\t\tthis[key] = options[key];\n\t\t\t\t\thasNewOptions = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// dont recreate if exising socket, same options + host + port\n\t\tif (this._socket && (this._socket.host !== this.host)) {\n\t\t\thasNewOptions = true;\n\t\t}\n\t\tif (this._socket && (this._socket.port !== this.port)) {\n\t\t\thasNewOptions = true;\n\t\t}\n\t\tif (this._socket && !hasNewOptions && !enforceRecreation) {\n\t\t\treturn;\n\t\t}\n\n\t\t// clean up if existing socket\n\t\tif (this._socket) {\n\t\t\tthis._socket.dispose();\n\t\t\tdelete this._socket;\n\t\t}\n\t\tthis._socket = new CasparCGSocket(this.host, this.port, this.autoReconnect, this.autoReconnectInterval, this.autoReconnectAttempts);\n\t\tthis.setParent(this._socket);\n\t\tthis._socket.on(\"error\", (error) => this._onSocketError(error));\n\t\tthis.on(CasparCGSocketStatusEvent.STATUS, (event) => this._onSocketStatusChange(event));\n\t\tthis.on(CasparCGSocketResponseEvent.RESPONSE, (event) => this._handleSocketResponse(event.response));\n\n\t\t// inherit log method\n\t\tthis._socket.log = (args) => this._log(args);\n\t}\n\n\t/**\n\t * Creates a new [[CasparCGSocket]] and connects.\n\t * \n\t * @param options\tSetting new [[ICasparCGConnection]] properties will override each individual property allready defined on the `CasparCG` object. Existing properties not overwritten by this `options` object will remain.\n\t */\n\tpublic connect(options?: IConnectionOptions): void {\n\t\t// recreate socket if new options\n\t\tif (options) {\n\t\t\tthis._createNewSocket(options);\n\t\t}\n\t\tif (this._socket) {\n\t\t\tthis._socket.connect();\n\t\t}\n\t}\n\n\t/**\n\t * Disconnects and disposes the [[CasparCGSocket]] connection.\n\t */\n\tpublic disconnect(): void {\n\t\tif (this._socket) {\n\t\t\tthis._socket.disconnect();\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic get host(): string{\n\t\treturn this._host;\n\t}\n\n\t/**\n\t * Setting the `host` will create a new [[CasparCGSocket]] connection.\n\t * \n\t * The new `CasparCGSocket` will `autoConnect` if the old socket was either successfully connected, or currently reconnecting. Changing the host resets the number of [[CasparCG.autoReconnectAttempts]]. \n\t */\n\tpublic set host(host: string){\n\t\tif (this._host !== host) {\n\t\t\tthis._host = host;\n\t\t\tif (this._socket !=  null) {\n\t\t\t\tlet shouldReconnect = (this.connected ||  ((this._socket.socketStatus & SocketState.reconnecting) === SocketState.reconnecting));\n\t\t\t\tthis._createNewSocket();\n\t\t\t\tif (shouldReconnect) {\n\t\t\t\t\tthis.connect();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic get port(): number{\n\t\treturn this._port;\n\t}\n\n\t/**\n\t * Setting the `port` will create a new [[CasparCGSocket]] connection.\n\t * \n\t * The new `CasparCGSocket` will `autoConnect` if the old socket was either successfully connected, or currently reconnecting. Changing the host resets the number of [[CasparCG.autoReconnectAttempts]].\n\t */\n\tpublic set port(port: number){\n\t\tif (this._port !== port) {\n\t\t\tthis._port = port;\n\t\t\tif (this._socket !=  null) {\n\t\t\t\tlet shouldReconnect = (this.connected ||  ((this._socket.socketStatus & SocketState.reconnecting) === SocketState.reconnecting));\n\t\t\t\tthis._createNewSocket();\n\t\t\t\tif (shouldReconnect) {\n\t\t\t\t\tthis.connect();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Try to reconnect in case of unintentionally loss of connection, or in case of failed connection in the first place.\n\t */\n\tpublic get autoReconnect(): boolean {\n\t\treturn this._autoReconnect;\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic set autoReconnect(autoReconnect: boolean) {\n\t\tthis._autoReconnect = autoReconnect;\n\t\tif (this._socket) {\n\t\t\tthis._socket.autoReconnect = this._autoReconnect;\n\t\t}\n\t}\n\n\t/**\n\t * Timeout in milliseconds between each connection attempt during reconnection.\n\t */\n\tpublic get autoReconnectInterval(): number {\n\t\treturn this._autoReconnectInterval;\n\t}\n\n\n\t/**\n\t * \n\t */\n\tpublic set autoReconnectInterval(autoReconnectInterval: number) {\n\t\tthis._autoReconnectInterval = autoReconnectInterval;\n\t\tif (this._socket) {\n\t\t\tthis._socket.autoReconnectInterval = this._autoReconnectInterval;\n\t\t}\n\t}\n\t/**\n\t * Max number of attempts of connection during reconnection. This value resets once the reconnection is over (either in case of successfully reconnecting, changed connection properties such as `host` or `port` or by being manually cancelled). \n\t */\n\tpublic get autoReconnectAttempts(): number {\n\t\treturn this._autoReconnectAttempts;\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic set autoReconnectAttempts(autoReconnectAttempts: number) {\n\t\tthis._autoReconnectAttempts = autoReconnectAttempts;\n\t\tif (this._socket) {\n\t\t\tthis._socket.autoReconnectAttempts = this._autoReconnectAttempts;\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic get connectionOptions(): ConnectionOptions {\n\t\tlet options: ConnectionOptions = new ConnectionOptions();\n\n\t\tfor (let key in options) {\n\t\t\tif (this.hasOwnProperty(key) ||  CasparCG.prototype.hasOwnProperty(key)) {\n\t\t\t\toptions[key] = this[key];\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic get connected(): boolean{\n\t\treturn this._connected ||  false;\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic get connectionStatus(): SocketState{\n\t\treturn this._socket.socketStatus;\n\t}\n\n\t/**\n\t * \n\t */\n\tprivate _onSocketStatusChange(socketStatus: CasparCGSocketStatusEvent): void {\n\t\tlet connected = (socketStatus.valueOf() &  SocketState.connected) === SocketState.connected;\n\n\t\tif (this.onConnectionStatus) {\n\t\t\tthis.onConnectionStatus(socketStatus.valueOf());\n\t\t}\n\n\t\tif (connected !== this._connected) {\n\t\t\tthis._connected = connected;\n\t\t\tthis.fire(CasparCGSocketStatusEvent.STATUS_CHANGED, socketStatus);\n\n\t\t\tif (this.onConnectionChanged) {\n\t\t\t\tthis.onConnectionChanged(this._connected);\n\t\t\t}\n\t\t\tif (this._connected) {\n\t\t\t\tthis.fire(CasparCGSocketStatusEvent.CONNECTED, socketStatus);\n\t\t\t\tif (this.onConnected) {\n\t\t\t\t\tthis.onConnected(this._connected);\n\t\t\t\t}\n\t\t\t\tthis._expediteCommand();\n\t\t\t}\n\t\t\tif (!this._connected) {\n\t\t\t\tthis.fire(CasparCGSocketStatusEvent.DISCONNECTED, socketStatus);\n\t\t\t\tif (this.onDisconnected) {\n\t\t\t\t\tthis.onDisconnected(this._connected);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\tpublic get commandQueue(): Array<IAMCPCommand> {\n\t\treturn this._queuedCommands;\n\t}\n\n\t/**\n\t * \n\t */\n\tprivate _onSocketError(error: Error): void {\n\t\tthis._log(error);\n\t}\n\n\t/**\n\t * \n\t */\n\tprivate _log(args: any): void {\n\t\tif (args instanceof Error) {\n\t\t\tconsole.error(args);\n\t\t\tif (this.onError) {\n\t\t\t\tthis.onError(args);\n\n\t\t\t\t// re-emit error if there's any listener\n\t\t\t\tif (this.listenerCount(\"error\") > 0) {\n\t\t\t\t\tthis.fire(\"error\", args);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (this.debug) {\n\t\t\tconsole.log(args);\n\t\t}\n\t\tif (this.onLog) {\n\t\t\tthis.onLog(args);\n\t\t}\n\t\tthis.fire(LogEvent.LOG, new LogEvent(args));\n\t}\n\n\t/**\n\t * @todo\timplement\n\t * @todo\tdocument\n\t */\n\tpublic do(command: IAMCPCommand): Promise<IAMCPCommand>;\n\tpublic do(commandString: string, ...params: (string|Param)[]): Promise<IAMCPCommand>;\n\tpublic do(commandOrString: (IAMCPCommand|string), ...params: (string|Param)[]): Promise<IAMCPCommand> {\n\t\tlet command: IAMCPCommand;\n\n\t\tif (isIAMCPCommand(commandOrString)) {\n\t\t\tcommand = commandOrString as IAMCPCommand;\n\t\t}else if (typeof commandOrString === \"string\") {\n\t\t\tif (AMCP.hasOwnProperty(commandOrString)) {\n\n\t\t\t\t// @todo: parse out params from commandString, if Params is empty and commandString.split(\" \").length > 1\n\n\n\n\t\t\t\t// @todo: typechecking with fallback\n\t\t\t\tcommand = Object.create(AMCP[commandOrString][\"prototype\"]);\n\t\t\t\t// @todo: typechecking with fallback\n\t\t\t\tcommand.constructor.apply(command, params);\n\t\t\t}\n\t\t}else {\n\t\t\t// @todo: Handle, return?\n\t\t\tthrow new Error(\"Invalid command or commandstring\");\n\t\t}\n\t\t// validate command and params\n\t\tif (!command.validateParams()) {\n\t\t\t// handle error, return??\n\t\t\treturn null;\n\t\t}\n\n\t\treturn new Promise<IAMCPCommand>((resolve, reject) => {command.resolve = resolve; command.reject = reject; this._addQueuedCommand(command); });\n\t}\n\n\n\t/**\n\t * \n\t */\n\tprivate _addQueuedCommand(command: IAMCPCommand): IAMCPCommand {\n\t\tthis._queuedCommands.push(command);\n\t\tcommand.status = IAMCPStatus.Queued;\n\t\tthis._expediteCommand();\n\t\treturn command;\n\t}\n\n\t/**\n\t * @todo: document\n\t */\n\tpublic removeQueuedCommand(id: string): boolean {\n\t\tlet removed: Array<IAMCPCommand>;\n\t\tfor (let i: number = 0; i < this._queuedCommands.length; i++) {\n\t\t\tlet o: IAMCPCommand = this._queuedCommands[i];\n\t\t\tif (o.id === id) {\n\t\t\t\tremoved = this._queuedCommands.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn typeof Object.prototype.toString.call( removed ) === \"[object Array]\" && removed.length > 0;\n\t}\n\n\t/**\n\t * \n\t */\n\tprivate _handleSocketResponse(socketResponse: CasparCGSocketResponse): void {\n\n\n\t\t/*\n\t\t\n\t\t100 [action] - Information about an event.\n\t\t101 [action] - Information about an event. A line of data is being returned.\n\t\t\n\t\t200 [command] OK\t- The command has been executed and several lines of data (seperated by \\r\\n) are being returned (terminated with an additional \\r\\n)\n\t\t201 [command] OK\t- The command has been executed and data (terminated by \\r\\n) is being returned.\n\t\t202 [command] OK\t- The command has been executed.\n\t\t\n\t\t400 ERROR\t- Command not understood\n\t\t401 [command] ERROR\t- Illegal video_channel\n\t\t402 [command] ERROR\t- Parameter missing\n\t\t403 [command] ERROR\t- Illegal parameter\n\t\t404 [command] ERROR\t- Media file not found\n\t\t\n\t\t500 FAILED\t- Internal server error\n\t\t501 [command] FAILED\t- Internal server error\n\t\t502 [command] FAILED\t- Media file unreadable\n\t\t\n\t\t*/\n\n\t\t// receive data & handle possible timeout first\n    \t\t// parse incoming data & handle parsing errors (response code unknown, unexpected format)\n      \t\t\t// create error object for response codes 400 to 502\n        \t\t\t// reject with error object\n      \t\t\t// create response object for response codes 200 to 202\n        \t\t\t// resolve with response object\n\n\t\tlet currentCommand: IAMCPCommand = this._sentCommands.shift();\n\t\tif (!(currentCommand.response instanceof AMCPResponse)) {\n\t\t\tcurrentCommand.response = new AMCPResponse();\n\t\t}\n\n\t\tif (currentCommand.validateResponse(socketResponse)) {\n\t\t\tcurrentCommand.status =  IAMCPStatus.Suceeded;\n\t\t\tcurrentCommand.resolve(currentCommand);\n\t\t} else {\n\t\t\tcurrentCommand.status =  IAMCPStatus.Failed;\n\t\t\tcurrentCommand.reject(currentCommand);\n\t\t}\n\n\t\tthis.fire(CasparCGSocketCommandEvent.RESPONSE, new CasparCGSocketCommandEvent(currentCommand));\n\t\tthis._expediteCommand();\n\t}\n\n\t/**\n\t * \n\t */\n\tprivate _expediteCommand(): void {\n\t\tif (this.connected) {\n\t\t\t// @todo add TTL for cleanup on stuck commands\n\n\t\t\t// salvo mode\n\t\t\tif (this.queueMode === QueueMode.SALVO) {\n\t\t\t\tif (this._queuedCommands.length > 0) {\n\t\t\t\t\tlet nextCommand: IAMCPCommand = this._queuedCommands.shift();\n\t\t\t\t\tthis._sentCommands.push(nextCommand);\n\t\t\t\t\tthis._socket.executeCommand(nextCommand);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// sequential mode\n\t\t\tif (this.queueMode === QueueMode.SEQUENTIAL) {\n\t\t\t\tif (this._queuedCommands.length > 0 && this._sentCommands.length === 0) {\n\t\t\t\t\tlet nextCommand: IAMCPCommand = this._queuedCommands.shift();\n\t\t\t\t\tthis._sentCommands.push(nextCommand);\n\t\t\t\t\tthis._socket.executeCommand(nextCommand);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t\t\t\t///*********************////\n\t\t\t\t///***\t\tAPI\t\t****////\n\t\t\t\t///*********************///\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#LOADBG>\n\t */\n\tpublic loadbg(channel: number, layer: number = undefined, clip: string, loop?: boolean, transition?: Enum.Transition|string, transitionDuration?: number, transitionEasing?: Enum.Ease|string, transitionDirection?: Enum.Direction|string, seek?: number, length?: number, filter?: string, auto?: boolean|number|string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.LoadbgCommand({channel: channel, layer: layer, clip: clip, loop: loop, transition: transition, transitionDuration: transitionDuration, transitionEasing: transitionEasing, transitionDirection: transitionDirection, seek: seek, length: length, filter: filter, auto: auto}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#LOAD>\n\t */\n\tpublic load(channel: number, layer: number = undefined, clip: string, loop?: boolean, transition?: Enum.Transition|string, transitionDuration?: number, transitionEasing?: Enum.Ease|string, transitionDirection?: Enum.Direction|string, seek?: number, length?: number, filter?: string, auto?: boolean|number|string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.LoadCommand({channel: channel, layer: layer, clip: clip, loop: loop, transition: transition, transitionDuration: transitionDuration, transitionEasing: transitionEasing, transitionDirection: transitionDirection, seek: seek, length: length, filter: filter, auto: auto}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#PLAY>\n\t */\n\tpublic play(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic play(channel: number, layer: number, clip?: string, loop?: boolean, transition?: Enum.Transition|string, transitionDuration?: number, transitionEasing?: Enum.Ease|string, transitionDirection?: Enum.Direction|string, seek?: number, length?: number, filter?: string, auto?: boolean|number|string): Promise<IAMCPCommand>;\n\tpublic play(channel: number, layer: number = undefined, clip?: string, loop?: boolean, transition?: Enum.Transition|string, transitionDuration?: number, transitionEasing?: Enum.Ease|string, transitionDirection?: Enum.Direction|string, seek?: number, length?: number, filter?: string, auto?: boolean|number|string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.PlayCommand({channel: channel, layer: layer, clip: clip, loop: loop, transition: transition, transitionDuration: transitionDuration, transitionEasing: transitionEasing, transitionDirection: transitionDirection, seek: seek, length: length, filter: filter, auto: auto}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#PAUSE>\n\t */\n\tpublic pause(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.PauseCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#RESUME>\n\t */\n\tpublic resume(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ResumeCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#STOP>\n\t */\n\tpublic stop(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.StopCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_ADD>\n\t */\n\tpublic cgAdd(channel: number, layer: number = undefined, flashLayer: number = undefined, templateName: string, playOnLoad?: boolean|number|string, data?: TemplateData): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGAddCommand({channel: channel, layer: layer, flashLayer: flashLayer, templateName: templateName, playOnLoad: playOnLoad, data: data}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_PLAY>\n\t */\n\tpublic cgPlay(channel: number, layer?: number, flashLayer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGPlayCommand({channel: channel, layer: layer, flashLayer: flashLayer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_STOP>\n\t */\n\tpublic cgStop(channel: number, layer?: number, flashLayer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGStopCommand({channel: channel, layer: layer, flashLayer: flashLayer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_NEXT>\n\t */\n\tpublic cgNext(channel: number, layer?: number, flashLayer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGNextCommand({channel: channel, layer: layer, flashLayer: flashLayer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_REMOVE> \n\t */\n\tpublic cgRemove(channel: number, layer?: number, flashLayer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGRemoveCommand({channel: channel, layer: layer, flashLayer: flashLayer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_CLEAR>\n\t */\n\tpublic cgClear(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGClearCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_UPDATE>\n\t */\n\tpublic cgUpdate(channel: number, layer: number = undefined, flashLayer: number, data: TemplateData): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGUpdateCommand({channel: channel, layer: layer, flashLayer: flashLayer, data: data}));\n\t}\n\n\t/*\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_INVOKE\n\t */\n\tpublic cgInvoke(channel: number, layer: number, flashLayer: number, method: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGRemoveCommand({channel: channel, layer: layer, flashLayer: flashLayer, method: method}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_KEYER>\n\t */\n\tpublic mixerKeyer(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerKeyer(channel: number, layer: number, state: number|boolean, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerKeyer(channel: number, layer?: number, state?: number|boolean, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerKeyerCommand({channel: channel, layer: layer, keyer: state, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_KEYER>\n\t */\n\tpublic mixerKeyerDeferred(channel: number, layer: number, state?: number|boolean): Promise<IAMCPCommand> {\n\t\treturn this.mixerKeyer(channel, layer, state, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_KEYER>\n\t */\n\tpublic getMixerStatusKeyer(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerKeyer(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CHROMA>\n\t */\n\tpublic mixerChroma(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerChroma(channel: number, layer: number, keyer: Enum.Chroma, threshold: number, softness: number, spill: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerChroma(channel: number, layer: number, keyer: string, threshold: number, softness: number, spill: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerChroma(channel: number, layer: number, keyer?: Enum.Chroma|string, threshold?: number, softness?: number, spill?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerChroma(channel: number, layer: number = 0, keyer?: Enum.Chroma|string, threshold?: number, softness?: number, spill?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerChromaCommand({channel: channel, layer: layer, keyer: keyer, threshold: threshold, softness: softness, spill: spill, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CHROMA>\n\t */\n\tpublic mixerChromaDeferred(channel: number, layer: number, keyer: Enum.Chroma, threshold: number, softness: number, spill: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\tpublic mixerChromaDeferred(channel: number, layer: number, keyer: string, threshold: number, softness: number, spill: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand>;\n\tpublic mixerChromaDeferred(channel: number, layer: number = 0, keyer: Enum.Chroma|string, threshold: number, softness: number, spill: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerChroma(channel, layer, keyer, threshold, softness, spill, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CHROMA>\n\t */\n\tpublic getMixerStatusChroma(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerChroma(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_BLEND>\n\t */\n\tpublic mixerBlend(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerBlend(channel: number, layer: number, blendmode: Enum.BlendMode, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerBlend(channel: number, layer: number, blendmode: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerBlend(channel: number, layer?: number, blendmode?: Enum.BlendMode|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerBlend(channel: number, layer?: number, blendmode?: Enum.BlendMode|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerBlendCommand({channel: channel, layer: layer, blendmode: blendmode, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_BLEND>\n\t */\n\tpublic mixerBlendDeferred(channel: number, layer: number, blendmode: Enum.BlendMode): Promise<IAMCPCommand>;\n\tpublic mixerBlendDeferred(channel: number, layer: number, blendmode: string): Promise<IAMCPCommand>;\n\tpublic mixerBlendDeferred(channel: number, layer: number = undefined, blendmode: Enum.BlendMode|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerBlend(channel, layer, blendmode, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_BLEND>\n\t */\n\tpublic getMixerStatusBlend(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerBlend(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_OPACITY>\n\t */\n\tpublic mixerOpacity(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerOpacity(channel: number, layer: number, opacity: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerOpacity(channel: number, layer: number, opacity: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerOpacity(channel: number, layer?: number, opacity?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerOpacity(channel: number, layer?: number, opacity?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerOpacityCommand({channel: channel, layer: layer, opacity: opacity, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_OPACITY>\n\t */\n\tpublic mixerOpacityDeferred(channel: number, layer: number = undefined, opacity: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerOpacity(channel, layer, opacity, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_OPACITY>\n\t */\n\tpublic getMixerStatusOpacity(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerOpacity(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_BRIGHTNESS>\n\t */\n\tpublic mixerBrightness(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerBrightness(channel: number, layer: number, brightness: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerBrightness(channel: number, layer: number, brightness: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerBrightness(channel: number, layer?: number, brightness?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerBrightness(channel: number, layer?: number, brightness?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerBrightnessCommand({channel: channel, layer: layer, brightness: brightness, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_BRIGHTNESS>\n\t */\n\tpublic mixerBrightnessDeferred(channel: number, layer: number = undefined, brightness: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerBrightness(channel, layer, brightness, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_BRIGHTNESS>\n\t */\n\tpublic getMixerStatusBrightness(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerBrightness(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_SATURATION>\n\t */\n\tpublic mixerSaturation(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerSaturation(channel: number, layer: number, saturation: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerSaturation(channel: number, layer: number, saturation: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerSaturation(channel: number, layer?: number, saturation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerSaturation(channel: number, layer?: number, saturation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerSaturationCommand({channel: channel, layer: layer, saturation: saturation, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_SATURATION>\n\t */\n\tpublic mixerSaturationDeferred(channel: number, layer: number = undefined, saturation: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerSaturation(channel, layer, saturation, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_SATURATION>\n\t */\n\tpublic getMixerStatusSaturation(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerSaturation(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CONTRAST>\n\t */\n\tpublic mixerContrast(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerContrast(channel: number, layer: number, contrast: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerContrast(channel: number, layer: number, contrast: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerContrast(channel: number, layer?: number, contrast?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerContrast(channel: number, layer?: number, contrast?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerContrastCommand({channel: channel, layer: layer, contrast: contrast, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CONTRAST>\n\t */\n\tpublic mixerContrastDeferred(channel: number, layer: number = undefined, contrast: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerContrast(channel, layer, contrast, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CONTRAST>\n\t */\n\tpublic getMixerStatusContrast(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerContrast(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_LEVELS>\n\t */\n\tpublic mixerLevels(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerLevels(channel: number, layer: number, minInput: number, maxInput: number, gamma: number, minOutput: number, maxOutput: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerLevels(channel: number, layer: number, minInput: number, maxInput: number, gamma: number, minOutput: number, maxOutput: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerLevels(channel: number, layer: number, minInput: number, maxInput: number, gamma: number, minOutput: number, maxOutput: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerLevels(channel: number, layer: number = undefined, minInput?: number, maxInput?: number, gamma?: number, minOutput?: number, maxOutput?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerLevelsCommand({channel: channel, layer: layer, minInput: minInput, maxInput: maxInput, gamma: gamma, minOutput: minOutput, maxOutput: maxOutput, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_LEVELS>\n\t */\n\tpublic mixerLevelsDeferred(channel: number, layer: number = undefined, minInput: number, maxInput: number, gamma: number, minOutput: number, maxOutput: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerLevels(channel, layer, minInput, maxInput, gamma, minOutput, maxOutput, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_LEVELS>\n\t */\n\tpublic getMixerStatusLevels(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerLevels(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_FILL>\n\t */\n\tpublic mixerFill(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerFill(channel: number, layer: number, x: number, y: number, xScale: number, yScale: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerFill(channel: number, layer: number, x: number, y: number, xScale: number, yScale: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerFill(channel: number, layer: number, x: number, y: number, xScale: number, yScale: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerFill(channel: number, layer: number = undefined, x?: number, y?: number, xScale?: number, yScale?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerFillCommand({channel: channel, layer: layer, x: x, y: y, xScale: xScale, yScale: yScale, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/*\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_FILL>\n\t */\n\tpublic mixerFillDeferred(channel: number, layer: number = undefined, x: number, y: number, xScale: number, yScale: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerFill(channel, layer, x, y, xScale, yScale, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_FILL>\n\t */\n\tpublic getMixerStatusFill(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerFill(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CLIP>\n\t */\n\tpublic mixerClip(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerClip(channel: number, layer: number, x: number, y: number, width: number, height: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerClip(channel: number, layer: number, x: number, y: number, width: number, height: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerClip(channel: number, layer: number, x: number, y: number, width: number, height: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerClip(channel: number, layer: number = undefined, x?: number, y?: number, width?: number, height?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerClipCommand({channel: channel, layer: layer, x: x, y: y, width: width, height: height, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CLIP>\n\t */\n\tpublic mixerClipDeferred(channel: number, layer: number = undefined, x: number, y: number, width: number, height: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerClip(channel, layer, x, y, width, height, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CLIP>\n\t */\n\tpublic getMixerStatusClip(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerClip(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_ANCHOR>\n\t */\n\tpublic mixerAnchor(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerAnchor(channel: number, layer: number, x: number, y: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerAnchor(channel: number, layer: number, x: number, y: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerAnchor(channel: number, layer: number, x: number, y: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerAnchor(channel: number, layer: number = undefined, x?: number, y?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerAnchorCommand({channel: channel, layer: layer, x: x, y: y, ransition: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_ANCHOR>\n\t */\n\tpublic mixerAnchorDeferred(channel: number, layer: number = undefined, x: number, y: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerAnchor(channel, layer, x, y, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_ANCHOR>\n\t */\n\tpublic getMixerStatusAnchor(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerAnchor(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CROP>\n\t */\n\tpublic mixerCrop(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerCrop(channel: number, layer: number, left: number, top: number, right: number, bottom: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerCrop(channel: number, layer: number, left: number, top: number, right: number, bottom: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerCrop(channel: number, layer: number, left: number, top: number, right: number, bottom: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerCrop(channel: number, layer: number = undefined, left?: number, top?: number, right?: number, bottom?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerCropCommand({channel: channel, layer: layer, left: left, top: top, right: right, bottom: bottom, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CROP>\n\t */\n\tpublic mixerCropDeferred(channel: number, layer: number = undefined, left: number, top: number, right: number, bottom: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerCrop(channel, layer, left, top, right, bottom, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CROP>\n\t */\n\tpublic getMixerStatusCrop(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerCrop(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_ROTATION>\n\t */\n\tpublic mixerRotation(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerRotation(channel: number, layer: number, rotation: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerRotation(channel: number, layer: number, rotation: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerRotation(channel: number, layer?: number, rotation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerRotation(channel: number, layer?: number, rotation?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerRotationCommand({channel: channel, layer: layer, rotation: rotation, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_ROTATION>\n\t */\n\tpublic mixerRotationDeferred(channel: number, layer: number = undefined, rotation: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerRotation(channel, layer, rotation, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_ROTATION>\n\t */\n\tpublic getMixerStatusRotation(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerRotation(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_PERSPECTIVE>\n\t */\n\tpublic mixerPerspective(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerPerspective(channel: number, layer: number, topLeftX: number, topLeftY: number, topRightx: number, topRightY: number, bottomRightX: number, bottomRightY: number, bottmLeftX: number, bottomLeftY: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerPerspective(channel: number, layer: number, topLeftX: number, topLeftY: number, topRightx: number, topRightY: number, bottomRightX: number, bottomRightY: number, bottmLeftX: number, bottomLeftY: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerPerspective(channel: number, layer: number, topLeftX: number, topLeftY: number, topRightx: number, topRightY: number, bottomRightX: number, bottomRightY: number, bottmLeftX: number, bottomLeftY: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerPerspective(channel: number, layer: number = undefined, topLeftX?: number, topLeftY?: number, topRightx?: number, topRightY?: number, bottomRightX?: number, bottomRightY?: number, bottmLeftX?: number, bottomLeftY?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerPerspectiveCommand({channel: channel, layer: layer, topLeftX: topLeftX, topLeftY: topLeftY, topRightx: topRightx, topRightY: topRightY, bottomRightX: bottomRightX, bottomRightY: bottomRightY, bottmLeftX: bottmLeftX, bottomLeftY: bottomLeftY, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_PERSPECTIVE>\n\t */\n\tpublic mixerPerspectiveDeferred(channel: number, layer: number = undefined, topLeftX: number, topLeftY: number, topRightx: number, topRightY: number, bottomRightX: number, bottomRightY: number, bottomLeftX: number, bottomLeftY: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.mixerPerspective(channel, layer, topLeftX, topLeftY, topRightx, topRightY, bottomRightX, bottomRightY, bottomLeftX, bottomLeftY, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_PERSPECTIVE>\n\t */\n\tpublic getMixerStatusPerspective(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerPerspective(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_MIPMAP>\n\t */\n\tpublic mixerMipmap(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerMipmap(channel: number, layer: number, state: number|boolean, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerMipmap(channel: number, layer?: number, state?: number|boolean, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerMipmapCommand({channel: channel, layer: layer, keyer: state, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_MIPMAP>\n\t */\n\tpublic mixerMipmapDeferred(channel: number, layer?: number, state?: number|boolean): Promise<IAMCPCommand> {\n\t\treturn this.mixerMipmap(channel, layer, state, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_MIPMAP>\n\t */\n\tpublic getMixerStatusMipmap(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerMipmap(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_VOLUME>\n\t */\n\tpublic mixerVolume(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerVolume(channel: number, layer: number, volume: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerVolume(channel: number, layer: number, volume: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerVolume(channel: number, layer?: number, volume?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerVolume(channel: number, layer?: number, volume?: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerVolumeCommand({channel: channel, layer: layer, volume: volume, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_VOLUME>\n\t */\n\tpublic mixerVolumeDeferred(channel: number, layer: number = undefined, volume: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerVolume(channel, layer, volume, transitionDuration, transitionEasing, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_VOLUME>\n\t */\n\tpublic getMixerStatusVolume(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerVolume(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_MASTERVOLUME>\n\t */\n\tpublic mixerMastervolume(channel: number): Promise<IAMCPCommand>;\n\tpublic mixerMastervolume(channel: number, mastervolume: number, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerMastervolume(channel: number, mastervolume?: number, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerMastervolumeCommand({channel: channel, mastervolume: mastervolume, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_MASTERVOLUME>\n\t */\n\tpublic mixerMastervolumeDeferred(channel: number, mastervolume?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerMastervolume(channel, mastervolume, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_MASTERVOLUME>\n\t */\n\tpublic getMixerStatusMastervolume(channel: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerMastervolume(channel);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_STRAIGHT_ALPHA_OUTPUT>\n\t */\n\tpublic mixerStraightAlphaOutput(channel: number, layer?: number): Promise<IAMCPCommand>;\n\tpublic mixerStraightAlphaOutput(channel: number, layer: number, state: number|boolean, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerStraightAlphaOutput(channel: number, layer?: number, state?: number|boolean, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerKeyerCommand({channel: channel, layer: layer, keyer: state, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_STRAIGHT_ALPHA_OUTPUT>\n\t */\n\tpublic mixerStraightAlphaOutputDeferred(channel: number, layer?: number, state?: number|boolean): Promise<IAMCPCommand> {\n\t\treturn this.mixerStraightAlphaOutput(channel, layer, state, true);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_STRAIGHT_ALPHA_OUTPUT>\n\t */\n\tpublic getMixerStatusStraightAlphaOutput(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.mixerStraightAlphaOutput(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_GRID>\n\t */\n\tpublic mixerGrid(channel: number, resolution: number, transitionDuration?: number, transitionEasing?: Enum.Ease, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerGrid(channel: number, resolution: number, transitionDuration?: number, transitionEasing?: string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerGrid(channel: number, resolution: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand>;\n\tpublic mixerGrid(channel: number, resolution: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string, defer?: boolean): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerGridCommand({channel: channel, resolution: resolution, transitionDuration: transitionDuration, easing: transitionEasing, defer: defer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_GRID>\n\t */\n\tpublic mixerGridDeferred(channel: number, resolution: number, transitionDuration?: number, transitionEasing?: Enum.Ease|string): Promise<IAMCPCommand> {\n\t\treturn this.mixerGrid(channel, resolution, transitionDuration, transitionEasing, true);\n\t}\n\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_COMMIT>\n\t */\n\tpublic mixerCommit(channel: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerCommitCommand({channel: channel}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#MIXER_CLEAR>\n\t */\n\tpublic mixerClear(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.MixerClearCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CLEAR>\n\t */\n\tpublic clear(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ClearCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * @todo\timplement\n\t * @todo\tdocument\n\t */\n\tpublic call(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CallCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * @todo\timplement\n\t * @todo\tdocument\n\t */\n\tpublic swap(): Promise<IAMCPCommand> {\n\t\t// @todo: overloading of origin/destination pairs\n\t\treturn this.do(new AMCP.SwapCommand());\n\t}\n\n\t/**\n\t * @todo\timplement\n\t * @todo\tdocument\n\t */\n\tpublic add(channel: number): Promise<IAMCPCommand> {\n\t\t// remember index /layer\n\t\t\t// i suggest duplicating abstractchannelorlayer to avoid problems if the address logic changes for layers and not indicies\n\t\t// consumer factoruies parses \"consumer\"-string parameter\n\t\treturn this.do(new AMCP.AddCommand({channel: channel}));\n\t}\n\n\t/**\n\t * @todo\timplement\n\t * @todo\tdocument\n\t */\n\tpublic remove(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.RemoveCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#PRINT>\n\t */\n\tpublic print(channel: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.PrintCommand({channel: channel}));\n\t}\n\n\t/**\n\t * @todo\timplement\n\t * @todo\tdocument\n\t */\n\tpublic set(channel: number): Promise<IAMCPCommand> {\n\t\t// @todo:  param enum (only MODE and CHANNEL_LAYOUT for now)\n\t\t// @todo: switchable second parameter based on what to set:\n\t\t\t// mode = enum modes.......\n\t\t\t// layer = enum layouts..........\n\t\treturn this.do(new AMCP.SetCommand({channel: \tchannel}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#LOCK>\n\t */\n\tpublic lock(channel: number, action: Enum.Lock, lockPhrase?: string): Promise<IAMCPCommand>;\n\tpublic lock(channel: number, action: string, lockPhrase?: string): Promise<IAMCPCommand>;\n\tpublic lock(channel: number, action: Enum.Lock|string, lockPhrase?: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.LockCommand({channel: channel, action: action, phrase: lockPhrase}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CHANNEL_GRID>\n\t */\n\tpublic channelGrid(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ChannelGridCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#GL_GC>\n\t */\n\tpublic glGC(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.GlGCCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#DATA_STORE>\n\t */\n\tpublic dataStore(fileName: string, data: TemplateData): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.DataStoreCommand({fileName: fileName, data: data}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#DATA_RETRIEVE>\n\t */\n\tpublic dataRetrieve(fileName: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.DataRetrieveCommand({fileName: fileName}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#DATA_LIST>\n\t */\n\tpublic dataList(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.DataListCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#DATA_REMOVE>\n\t */\n\tpublic dataRemove(fileName: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.DataRemoveCommand({fileName: fileName}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#THUMBNAIL_LIST>\n\t */\n\tpublic thumbnailList(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ThumbnailListCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#THUMBNAIL_RETRIEVE>\n\t */\n\tpublic thumbnailRetrieve(fileName: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ThumbnailRetrieveCommand({fileName: fileName}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#THUMBNAIL_GENERATE>\n\t */\n\tpublic thumbnailGenerate(fileName: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ThumbnailGenerateCommand({fileName: fileName}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#THUMBNAIL_GENERATE_ALL>\n\t */\n\tpublic thumbnailGenerateAll(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ThumbnailGenerateAllCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CINF>\n\t */\n\tpublic cinf(fileName: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CinfCommand({fileName: fileName}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CLS>\n\t */\n\tpublic cls(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ClsCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#FLS>\n\t */\n\tpublic fls(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.FlsCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#TLS>\n\t */\n\tpublic tls(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.TlsCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#VERSION>\n\t */\n\tpublic version(component?: Enum.Version): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.VersionCommand({component: component}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO>\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_2>\n\t */\n\tpublic info(channel?: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_TEMPLATE>\n\t */\n\tpublic infoTemplate(template: string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoTemplateCommand({template: template}));\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_CONFIG>\n\t */\n\tpublic infoConfig(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoConfigCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_PATHS>\n\t */\n\tpublic infoPaths(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoPathsCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_SYSTEM>\n\t */\n\tpublic infoSystem(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoSystemCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_SERVER>\n\t */\n\tpublic infoServer(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoServerCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_QUEUES>\n\t */\n\tpublic infoQueues(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoQueuesCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_THREADS>\n\t */\n\tpublic infoThreads(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoThreadsCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#INFO_DELAY>\n\t */\n\tpublic infoDelay(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.InfoDelayCommand({channel: channel, layer: layer}));\n\t}\n\n\t/**\n\t * Retrieves information about a running template or the templatehost.\n\t * \n\t * Calling `infoDelay` without `flashLayer` parameter is the same as calling the convenience method [[templateHostInfo]].\n\t * \n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_INFO>\n\t * \n\t * @param flashLayer\tIf not specified, information about the `TemplateHost` will be returned.\n\t */\n\tpublic cgInfo(channel: number, layer?: number, flashLayer?: number): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.CGInfoCommand({channel: channel, layer: layer, flashLayer: flashLayer}));\n\t}\n\n\t/**\n\t * Convenience method for calling [[cgInfo]] to return information about `TemplateHost` for a given layer.\n\t * \n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#CG_INFO>\n\t */\n\tpublic templateHostInfo(channel: number, layer?: number): Promise<IAMCPCommand> {\n\t\treturn this.cgInfo(channel, layer);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#GL_INFO>\n\t */\n\tpublic glInfo(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.GlInfoCommand());\n\t}\n\n\t/**\n\t * @param level\t\tLoglevel set by using [[LogLevel]] enum.\n\t */\n\tpublic logLevel(level: Enum.LogLevel): Promise<IAMCPCommand>;\n\t/**\n\t * @param level\t\tLogLevel set by string.\n\t */\n\tpublic logLevel(level: string): Promise<IAMCPCommand>;\n\t/**\n\t * Sets the server's [[LogLevel]].\n\t * \n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#LOG_LEVEL>\n\t */\n\tpublic logLevel(enumOrString: Enum.LogLevel|string): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.LogLevelCommand({level: enumOrString}));\n\t}\n\n\t/**\n\t * Enabling or disabling logging for a given [[LogCategory]].\n\t * \n\t * Convenience methods [[logCalltrace]] and [[logCommunication]] are available.\n\t * \n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#LOG_CATEGORY>\n\t */\n\tpublic logCategory(category: Enum.LogCategory, enabled: boolean): Promise<IAMCPCommand>;\n\tpublic logCategory(category: string, enabled: boolean): Promise<IAMCPCommand>;\n\tpublic logCategory(category: Enum.LogCategory|string, enabled: boolean): Promise<IAMCPCommand> {\n\t\tlet params: Param = {};\n\t\tparams[category.toString().toLowerCase()] = enabled;\n\t\treturn this.do(new AMCP.LogCategoryCommand(params));\n\t}\n\t/**\n\t * Convenience method for enabling or disabling logging for [[LogCategory.CALLTRACE]] through calling [[logCategory]].\n\t */\n\tpublic logCalltrace(enabled: boolean): Promise<IAMCPCommand> {\n\t\treturn this.logCategory(Enum.LogCategory.CALLTRACE, enabled);\n\t}\n\t/**\n\t * Convenience method for enabling or disabling logging for [[LogCategory.COMMUNICATION]] through calling [[logCategory]].\n\t */\n\tpublic logCommunication(enabled: boolean): Promise<IAMCPCommand> {\n\t\treturn this.logCategory(Enum.LogCategory.COMMUNICATION, enabled);\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#DIAG>\n\t */\n\tpublic diag(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.DiagCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#HELP>\n\t */\n\tpublic help(): Promise<IAMCPCommand>;\n\tpublic help(command?: Enum.Command): Promise<IAMCPCommand>;\n\tpublic help(commandName?: string): Promise<IAMCPCommand>;\n\tpublic help(commandOrName?: (Enum.Command|string)): Promise<IAMCPCommand> {\n\t\tlet param: Param = {};\n\t\tif (commandOrName) {\n\t\t\tparam[\"command\"] = commandOrName;\n\t\t}\n\t\treturn this.do(new AMCP.HelpCommand(param));\n\t}\n\n\t/**\n\t * Convenience method for calling [[help]] with no parameters.\n\t * \n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#HELP>\n\t */\n\tpublic getCommands(): Promise<IAMCPCommand> {\n\t\treturn this.help();\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#HELP_PRODUCER>\n\t */\n\tpublic helpProducer(): Promise<IAMCPCommand>;\n\tpublic helpProducer(producer: Enum.Producer): Promise<IAMCPCommand>;\n\tpublic helpProducer(producerName: string): Promise<IAMCPCommand>;\n\tpublic helpProducer(producerOrName?: (Enum.Producer|string)): Promise<IAMCPCommand> {\n\t\tlet param: Param = {};\n\t\tif (producerOrName) {\n\t\t\tparam[\"producer\"] = producerOrName;\n\t\t}\n\t\treturn this.do(new AMCP.HelpProducerCommand(param));\n\t}\n\n\t/**\n\t * Convenience method for calling [[helpProducer]] with no parameters.\n\t * \n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#HELP_PRODUCER>\n\t */\n\tpublic getProducers(): Promise<IAMCPCommand> {\n\t\treturn this.helpProducer();\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#HELP_CONSUMER>\n\t */\n\tpublic helpConsumer(): Promise<IAMCPCommand>;\n\tpublic helpConsumer(consumer: Enum.Consumer): Promise<IAMCPCommand>;\n\tpublic helpConsumer(consumerName: string): Promise<IAMCPCommand>;\n\tpublic helpConsumer(consumerOrName?: (Enum.Consumer|string)): Promise<IAMCPCommand> {\n\t\tlet param: Param = {};\n\t\tif (consumerOrName) {\n\t\t\tparam[\"consumer\"] = consumerOrName;\n\t\t}\n\t\treturn this.do(new AMCP.HelpConsumerCommand(param));\n\t}\n\n\t/**\n\t * Convenience method for calling [[helpConsumer]] with no parameters.\n\t * \n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#HELP_CONSUMER>\n\t */\n\tpublic getConsumers(): Promise<IAMCPCommand> {\n\t\treturn this.helpConsumer();\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#BYE>\n\t */\n\tpublic bye(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.ByeCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#KILL>\n\t */\n\tpublic kill(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.KillCommand());\n\t}\n\n\t/**\n\t * <http://casparcg.com/wiki/CasparCG_2.1_AMCP_Protocol#RESTART>\n\t */\n\tpublic restart(): Promise<IAMCPCommand> {\n\t\treturn this.do(new AMCP.RestartCommand());\n\t}\n}"],"sourceRoot":"/source/"}