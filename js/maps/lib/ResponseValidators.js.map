{"version":3,"sources":["lib/ResponseValidators.ts"],"names":[],"mappings":";AAAA,uBAAuC,QAAQ,CAAC,CAAA;AAOhD,IAAiB,QAAQ,CA2GxB;AA3GD,WAAiB,QAAQ,EAAC,CAAC;IAS1B;;OAEG;IACH;QAAA;QAQA,CAAC;QANA;;WAEG;QACI,iCAAO,GAAd,UAAe,QAAgC;YAC9C,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,sBAAC;IAAD,CARA,AAQC,IAAA;IARY,wBAAe,kBAQ3B,CAAA;IAED;;OAEG;IACH;QAAA;QA2BA,CAAC;QAzBA;;WAEG;QACI,8BAAO,GAAd,UAAe,QAAgC;YAE9C,IAAI,YAAY,GAAG,UAAS,GAAG;gBAC9B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACjB,GAAG,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC3D,CAAC;gBACD,MAAM,CAAC,GAAG,CAAC;YACZ,CAAC,CAAC;YAEF,IAAI,WAAW,CAAC;YAChB,IAAI,UAAU,CAAC;YAEf,oBAAS,CACR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EACnC,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,YAAY,CAAC,EAAC,EACjF,UAAC,KAAK,EAAE,MAAM;gBACb,WAAW,GAAG,KAAK,CAAC;gBACpB,UAAU,GAAG,MAAM,CAAC;YACrB,CAAC,CAAC,CAAC;YAEJ,MAAM,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,GAAG,KAAK,GAAG,UAAU,CAAC;QACpD,CAAC;QACF,mBAAC;IAAD,CA3BA,AA2BC,IAAA;IA3BY,qBAAY,eA2BxB,CAAA;IAED;;OAEG;IACH;QAAA;QAUA,CAAC;QARA;;WAEG;QACI,+BAAO,GAAd,UAAe,QAAgC;YAC9C,0EAA0E;YAC1E,IAAI,WAAW,GAAkB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,KAAK,QAAQ,EAArB,CAAqB,CAAC,CAAC;YACrF,MAAM,CAAC,WAAW,CAAC;QACpB,CAAC;QACF,oBAAC;IAAD,CAVA,AAUC,IAAA;IAVY,sBAAa,gBAUzB,CAAA;IAED;;OAEG;IACH;QAAA;QAQA,CAAC;QANA;;WAEG;QACI,+BAAO,GAAd,UAAe,QAAgC;YAC9C,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,oBAAC;IAAD,CARA,AAQC,IAAA;IARY,sBAAa,gBAQzB,CAAA;IAED;;OAEG;IACH;QAAA;QAQA,CAAC;QANA;;WAEG;QACI,iCAAO,GAAd,UAAe,QAAgC;YAC9C,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC;QACF,sBAAC;IAAD,CARA,AAQC,IAAA;IARY,wBAAe,kBAQ3B,CAAA;IAED;;OAEG;IACH;QAAA;QAQA,CAAC;QANA;;WAEG;QACI,oCAAO,GAAd,UAAe,QAAgC;YAC9C,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACF,yBAAC;IAAD,CARA,AAQC,IAAA;IARY,2BAAkB,qBAQ9B,CAAA;AACF,CAAC,EA3GgB,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QA2GxB","file":"lib/ResponseValidators.js","sourcesContent":["import {parseString as xmlParser} from \"xml2js\";\nimport {AMCP, AMCPUtil as AMCPUtilNS} from \"./AMCP\";\n// AMCPUtilNS\nimport CasparCGSocketResponse = AMCPUtilNS.CasparCGSocketResponse;\nimport {CommandÂ  as CommandNS} from \"./AbstractCommand\";\nimport IAMCPResponse = CommandNS.IAMCPResponse;\n\nexport namespace Response {\n\n\t/**\n\t * \n\t */\n\texport interface IResponseValidator {\n\t\tresolve(response: CasparCGSocketResponse): Object;\n\t}\n\n\t/**\n\t * \n\t */\n\texport class StatusValidator implements IResponseValidator {\n\n\t\t/**\n\t\t * \n\t\t */\n\t\tpublic resolve(response: CasparCGSocketResponse): Object {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\texport class XMLValidator implements IResponseValidator {\n\n\t\t/**\n\t\t * \n\t\t */\n\t\tpublic resolve(response: CasparCGSocketResponse): Object {\n\n\t\t\tlet parseNumbers = function(str) {\n\t\t\t\tif (!isNaN(str)) {\n\t\t\t\t\tstr = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n\t\t\t\t}\n\t\t\t\treturn str;\n\t\t\t};\n\n\t\t\tlet returnFalse;\n\t\t\tlet returnData;\n\n\t\t\txmlParser(\n\t\t\t\tresponse.items[0].replace(\"\\n\", \"\"),\n\t\t\t\t{async: false, trim: true, explicitArray: false, valueProcessors: [parseNumbers]},\n\t\t\t\t(error, result) => {\n\t\t\t\t\treturnFalse = error;\n\t\t\t\t\treturnData = result;\n\t\t\t\t});\n\n\t\t\treturn (returnFalse !== null) ? false : returnData;\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\texport class ListValidator implements IResponseValidator {\n\n\t\t/**\n\t\t * \n\t\t */\n\t\tpublic resolve(response: CasparCGSocketResponse): Object {\n\t\t\t// filters on stringitems in items-list and validates if any items present\n\t\t\tlet stringItems: Array<string> = response.items.filter((i) => typeof i === \"string\");\n\t\t\treturn stringItems;\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\texport class DataValidator implements IResponseValidator {\n\n\t\t/**\n\t\t * \n\t\t */\n\t\tpublic resolve(response: CasparCGSocketResponse): Object {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\texport class Base64Validator implements IResponseValidator {\n\n\t\t/**\n\t\t * \n\t\t */\n\t\tpublic resolve(response: CasparCGSocketResponse): Object {\n\t\t\treturn response.items[0];\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\texport class SomeThingValidator implements IResponseValidator {\n\n\t\t/**\n\t\t * \n\t\t */\n\t\tpublic resolve(response: CasparCGSocketResponse): Object {\n\t\t\treturn null;\n\t\t}\n\t}\n}"],"sourceRoot":"/source/"}